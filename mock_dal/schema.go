// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dal-go/dalgo/dal (interfaces: Schema)
//
// Generated by this command:
//
//	mockgen github.com/dal-go/dalgo/dal Schema
//

// Package mock_dal is a generated GoMock package.
package mock_dal

import (
	reflect "reflect"

	dal "github.com/dal-go/dalgo/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockSchema is a mock of Schema interface.
type MockSchema struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaMockRecorder
	isgomock struct{}
}

// MockSchemaMockRecorder is the mock recorder for MockSchema.
type MockSchemaMockRecorder struct {
	mock *MockSchema
}

// NewMockSchema creates a new mock instance.
func NewMockSchema(ctrl *gomock.Controller) *MockSchema {
	mock := &MockSchema{ctrl: ctrl}
	mock.recorder = &MockSchemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchema) EXPECT() *MockSchemaMockRecorder {
	return m.recorder
}

// DataToKey mocks base method.
func (m *MockSchema) DataToKey(incompleteKey *dal.Key, data any) (*dal.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataToKey", incompleteKey, data)
	ret0, _ := ret[0].(*dal.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataToKey indicates an expected call of DataToKey.
func (mr *MockSchemaMockRecorder) DataToKey(incompleteKey, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataToKey", reflect.TypeOf((*MockSchema)(nil).DataToKey), incompleteKey, data)
}

// KeyToFields mocks base method.
func (m *MockSchema) KeyToFields(key *dal.Key, data any) ([]dal.ExtraField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyToFields", key, data)
	ret0, _ := ret[0].([]dal.ExtraField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyToFields indicates an expected call of KeyToFields.
func (mr *MockSchemaMockRecorder) KeyToFields(key, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyToFields", reflect.TypeOf((*MockSchema)(nil).KeyToFields), key, data)
}

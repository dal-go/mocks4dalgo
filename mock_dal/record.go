// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dal-go/dalgo/dal (interfaces: Record)
//
// Generated by this command:
//
//	mockgen github.com/dal-go/dalgo/dal Record
//

// Package mock_dal is a generated GoMock package.
package mock_dal

import (
	reflect "reflect"

	dal "github.com/dal-go/dalgo/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockRecord is a mock of Record interface.
type MockRecord struct {
	ctrl     *gomock.Controller
	recorder *MockRecordMockRecorder
	isgomock struct{}
}

// MockRecordMockRecorder is the mock recorder for MockRecord.
type MockRecordMockRecorder struct {
	mock *MockRecord
}

// NewMockRecord creates a new mock instance.
func NewMockRecord(ctrl *gomock.Controller) *MockRecord {
	mock := &MockRecord{ctrl: ctrl}
	mock.recorder = &MockRecordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecord) EXPECT() *MockRecordMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockRecord) Data() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(any)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockRecordMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockRecord)(nil).Data))
}

// Error mocks base method.
func (m *MockRecord) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockRecordMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockRecord)(nil).Error))
}

// Exists mocks base method.
func (m *MockRecord) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockRecordMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRecord)(nil).Exists))
}

// HasChanged mocks base method.
func (m *MockRecord) HasChanged() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanged")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanged indicates an expected call of HasChanged.
func (mr *MockRecordMockRecorder) HasChanged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanged", reflect.TypeOf((*MockRecord)(nil).HasChanged))
}

// Key mocks base method.
func (m *MockRecord) Key() *dal.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(*dal.Key)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockRecordMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockRecord)(nil).Key))
}

// MarkAsChanged mocks base method.
func (m *MockRecord) MarkAsChanged() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkAsChanged")
}

// MarkAsChanged indicates an expected call of MarkAsChanged.
func (mr *MockRecordMockRecorder) MarkAsChanged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsChanged", reflect.TypeOf((*MockRecord)(nil).MarkAsChanged))
}

// SetError mocks base method.
func (m *MockRecord) SetError(err error) dal.Record {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetError", err)
	ret0, _ := ret[0].(dal.Record)
	return ret0
}

// SetError indicates an expected call of SetError.
func (mr *MockRecordMockRecorder) SetError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockRecord)(nil).SetError), err)
}
